name: Build and Deploy on Commit

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    # Only run when the commit message contains "releaseIt"
    if: contains(github.event.head_commit.message, 'releaseIt')
    strategy:
      matrix:
        arch: [x64]
    steps:
      # ––– Checkout repositories –––
      - name: Checkout chemical-bootstrap repository
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical-bootstrap
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap

      # Checkout chemical repository inside chemical-bootstrap
      - name: Checkout chemical repository inside chemical-bootstrap
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap/chemical
          submodules: recursive

      # ––– Setup build environment –––
      - name: Set up Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      # Get the SHA of the chemical-bootstrap repository
      - name: Get SHA of chemical-bootstrap repository
        id: get-sha
        shell: pwsh
        working-directory: chemical-bootstrap
        run: |
          $sha = (git rev-parse HEAD).Trim()
          echo "sha=$sha" >> $env:GITHUB_OUTPUT

      # split cache into restore + save
      - name: Restore cache for chemical-bootstrap/out-win
        id: bootstrap-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ./chemical-bootstrap/out-win/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Build the chemical-bootstrap project (only if not cached)
      - name: Build chemical-bootstrap (Windows)
        working-directory: chemical-bootstrap
        run: .\build.bat native-windows-gnu native
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true'

      # Save the out-win folder as cache
      - name: Save cache for chemical-bootstrap/out-win
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true' && success()
        id: bootstrap-cache-save
        uses: actions/cache/save@v4
        with:
          path: chemical-bootstrap/out-win/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Configure the project
      - name: Map workspace to X and configure
        shell: pwsh
        run: |
          subst X: $PWD
          cd X:\chemical-bootstrap\chemical
          mkdir out\build
          cmake -S . -B out\build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_NINJA_FORCE_RESPONSE_FILE=ON

      # Run the configure script to configure the project
      - name: Run configure script (Windows)
        working-directory: chemical-bootstrap/chemical
        run: bash ./scripts/configure.sh

      # Building the llvm based, tiny cc based compilers and lsp
      - name: Build Compiler Targets
        working-directory: chemical-bootstrap/chemical
        run: |
          cmake --build out\build --config Release --target Compiler
          cmake --build out\build --config Release --target TCCCompiler
          cmake --build out\build --config Release --target ChemicalLsp

      # Run the release script to create ZIP files
      - name: Run release packaging script (Windows)
        working-directory: chemical-bootstrap/chemical
        run: bash ./scripts/release.sh --windows

      # rename windows release files to include the aarch
      - name: Rename Windows release files
        shell: bash
        run: |
          mv chemical-bootstrap/chemical/out/release/windows.zip chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}.zip
          mv chemical-bootstrap/chemical/out/release/windows-tcc.zip chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-tcc.zip
          mv chemical-bootstrap/chemical/out/release/windows-lsp.zip chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-lsp.zip

      # ––– Get information about the latest release –––
      - name: Get latest release info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const releasesResponse = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const validReleases = releasesResponse.data.filter(release => !release.draft);
            
            if (validReleases.length === 0) {
              throw new Error("No published or pre-releases found.");
            }
            
            const latestRelease = validReleases[0];
            core.setOutput("tag", latestRelease.tag_name);
            core.setOutput("id", latestRelease.id);

      # ––– we check whether it is already attached –––
      - name: Check if windows-${{ matrix.arch }}.zip exists in latest release
        id: check_windows
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.get_latest_release.outputs.tag }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            const filenames = [
                `windows-${{ matrix.arch }}.zip`,
                `windows-${{ matrix.arch }}-tcc.zip`,
                `windows-${{ matrix.arch }}-lsp.zip`
            ];
            // Check if any of these files exist in the release assets
            const exists = release.assets.some(asset => filenames.includes(asset.name));
            core.setOutput("exists", exists.toString());

      # Upload artifacts
      - name: Upload release artifacts
        if: steps.check_windows.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_release.outputs.tag }}
          files: |
            chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}.zip
            chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-tcc.zip
            chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-lsp.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save windows-${{ matrix.arch }}.zip as artifact if already exists
        if: steps.check_windows.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}.zip
          path: chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}.zip

      - name: Save windows-${{ matrix.arch }}-tcc.zip as artifact if already exists
        if: steps.check_windows.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-tcc.zip
          path: chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-tcc.zip

      - name: Save windows-${{ matrix.arch }}-lsp.zip as artifact if already exists
        if: steps.check_windows.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-lsp.zip
          path: chemical-bootstrap/chemical/out/release/windows-${{ matrix.arch }}-lsp.zip

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'releaseIt')
    strategy:
      matrix:
        arch: [x86_64]
    steps:
      # ––– Checkout repositories –––
      - name: Checkout chemical-bootstrap repository
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical-bootstrap
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap

      # Checkout chemical repository inside chemical-bootstrap
      - name: Checkout chemical repository inside chemical-bootstrap
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap/chemical
          submodules: recursive

      # ––– Install dependencies –––
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git

      # Get the SHA of the chemical-bootstrap repository
      - name: Get SHA of chemical-bootstrap repository
        id: get-sha
        working-directory: chemical-bootstrap
        run: |
          SHA=$(git rev-parse HEAD | xargs)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # split cache into restore + save
      - name: Restore cache for chemical-bootstrap
        id: bootstrap-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Build the chemical-bootstrap project (Linux) (only if not cached)
      - name: Build chemical-bootstrap
        working-directory: chemical-bootstrap
        run: ./build native-linux-gnu native
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true'

      # saves the out folder in cache
      - name: Save cache for chemical-bootstrap
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true' && success()
        id: bootstrap-cache-save
        uses: actions/cache/save@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Configure chemical project
      - name: Configure Chemical Project
        working-directory: chemical-bootstrap/chemical
        run: |
          mkdir -p out/build
          cmake -S . -B out/build -DCMAKE_BUILD_TYPE=Release

      # Configure project dependencies using configuration script
      - name: Run configure script
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/setup-tcc.sh
          chmod +x ./scripts/configure.sh
          ./scripts/configure.sh

      - name: Build Compiler Targets
        working-directory: chemical-bootstrap/chemical
        run: |
          cmake --build out/build --config Release --target Compiler
          cmake --build out/build --config Release --target TCCCompiler
          cmake --build out/build --config Release --target ChemicalLsp

      - name: Run release packaging
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/release.sh
          ./scripts/release.sh --linux

      # rename linux release files to include the aarch
      - name: Rename Linux release files
        shell: bash
        run: |
          mv chemical-bootstrap/chemical/out/release/linux.zip chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}.zip
          mv chemical-bootstrap/chemical/out/release/linux-tcc.zip chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-tcc.zip
          mv chemical-bootstrap/chemical/out/release/linux-lsp.zip chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-lsp.zip

      # ––– Get information about the latest release –––
      - name: Get latest release info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const releasesResponse = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const validReleases = releasesResponse.data.filter(release => !release.draft);
            
            if (validReleases.length === 0) {
              throw new Error("No published or pre-releases found.");
            }
            
            const latestRelease = validReleases[0];
            core.setOutput("tag", latestRelease.tag_name);
            core.setOutput("id", latestRelease.id);

      # ––– Check and (conditionally) upload Linux archives –––
      - name: Check if linux-${{ matrix.arch }}.zip exists in latest release
        id: check_linux
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.get_latest_release.outputs.tag }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
            });
            const filenames = [
                `linux-${{ matrix.arch }}.zip`,
                `linux-${{ matrix.arch }}-tcc.zip`,
                `linux-${{ matrix.arch }}-lsp.zip`
            ];
            // Check if any of these files exist in the release assets
            const exists = release.assets.some(asset => filenames.includes(asset.name));
            core.setOutput("exists", exists.toString());

      - name: Upload release artifacts
        if: steps.check_linux.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_release.outputs.tag }}
          files: |
            chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}.zip
            chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-tcc.zip
            chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-lsp.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save linux-${{ matrix.arch }}.zip as artifact if already exists
        if: steps.check_linux.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}.zip
          path: chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}.zip

      - name: Save linux-${{ matrix.arch }}-tcc.zip as artifact if already exists
        if: steps.check_linux.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-tcc.zip
          path: chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-tcc.zip

      - name: Save linux-${{ matrix.arch }}-lsp.zip as artifact if already exists
        if: steps.check_linux.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-lsp.zip
          path: chemical-bootstrap/chemical/out/release/linux-${{ matrix.arch }}-lsp.zip

  build-alpine:
    name: Build on Alpine Linux
    container:
      image: alpine:3.20
    runs-on: ubuntu-latest
    # Only run when the commit message contains "releaseIt"
    if: contains(github.event.head_commit.message, 'releaseIt')
    strategy:
      matrix:
        arch: [x86_64]
    steps:

      # ––– Install dependencies –––
      - name: Install dependencies
        run: |
          apk add --no-cache build-base cmake ninja git bash python3 curl musl-dev linux-headers

      # ––– Checkout repositories –––
      - name: Checkout chemical-bootstrap repository
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical-bootstrap
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap

      # Checkout chemical repository inside chemical-bootstrap
      - name: Checkout chemical repository inside chemical-bootstrap
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap/chemical
          submodules: recursive

      # Get the SHA of the chemical-bootstrap repository
      - name: Get SHA of chemical-bootstrap repository
        id: get-sha
        working-directory: chemical-bootstrap
        run: |
          SHA=$(git rev-parse HEAD | xargs)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # split cache into restore + save
      - name: Restore cache for chemical-bootstrap
        id: bootstrap-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Build the chemical-bootstrap project (Linux) (only if not cached)
      - name: Build chemical-bootstrap
        working-directory: chemical-bootstrap
        run: |
          chmod +x build
          ./build native-linux-gnu native
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true'

      # saves the out folder in cache
      - name: Save cache for chemical-bootstrap
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true' && success()
        id: bootstrap-cache-save
        uses: actions/cache/save@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Linux steps unchanged
      - name: Configure Chemical Project
        working-directory: chemical-bootstrap/chemical
        run: |
          mkdir -p out/build
          cmake -S . -B out/build -DCMAKE_BUILD_TYPE=Release

      # Configure project dependencies using configuration script
      - name: Run configure script
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/setup-tcc.sh
          chmod +x ./scripts/configure.sh
          ./scripts/configure.sh

      - name: Build Compiler Targets
        working-directory: chemical-bootstrap/chemical
        run: |
          cmake --build out/build --config Release --target Compiler
          cmake --build out/build --config Release --target TCCCompiler

      - name: Run release packaging
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/release.sh
          ./scripts/release.sh --alpine

      # rename linux release files to include the aarch
      - name: Rename Linux Alpine release files
        shell: bash
        run: |
          mv chemical-bootstrap/chemical/out/release/linux-alpine.zip chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}.zip
          mv chemical-bootstrap/chemical/out/release/linux-alpine-tcc.zip chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}-tcc.zip

      - name: Get latest release info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const releasesResponse = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const validReleases = releasesResponse.data.filter(release => !release.draft);
            
            if (validReleases.length === 0) {
              throw new Error("No published or pre-releases found.");
            }
            
            const latestRelease = validReleases[0];
            core.setOutput("tag", latestRelease.tag_name);
            core.setOutput("id", latestRelease.id);

      # ––– Check and (conditionally) upload Linux archives –––
      - name: Check if linux-alpine-${{ matrix.arch }}.zip exists in latest release
        id: check_linux
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.get_latest_release.outputs.tag }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
            });
            const filenames = [
                `linux-alpine-${{ matrix.arch }}.zip`,
                `linux-alpine-${{ matrix.arch }}-tcc.zip`
            ];
            // Check if any of these files exist in the release assets
            const exists = release.assets.some(asset => filenames.includes(asset.name));
            core.setOutput("exists", exists.toString());

      - name: Upload release artifacts
        if: steps.check_linux.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_release.outputs.tag }}
          files: |
            chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}.zip
            chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}-tcc.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save linux-alpine-${{ matrix.arch }}.zip as artifact if already exists
        if: steps.check_linux.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux-alpine-${{ matrix.arch }}.zip
          path: chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}.zip

      - name: Save linux-alpine-${{ matrix.arch }}-tcc.zip as artifact if already exists
        if: steps.check_linux.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux-alpine-${{ matrix.arch }}-tcc.zip
          path: chemical-bootstrap/chemical/out/release/linux-alpine-${{ matrix.arch }}-tcc.zip

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, 'releaseIt')
    strategy:
      matrix:
        arch: [x86_64]
    steps:
      # ––– Install dependencies –––
      - name: Install Dependencies
        run: |
          brew update
          brew install cmake ninja git python

      # ––– Checkout repositories –––
      - name: Checkout chemical-bootstrap repository
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical-bootstrap
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap

      - name: Checkout chemical repository inside chemical-bootstrap
        uses: actions/checkout@v3
        with:
          repository: chemicallang/chemical
          token: ${{ secrets.GITHUB_TOKEN }}
          path: chemical-bootstrap/chemical
          submodules: recursive

      # Get the SHA of the chemical-bootstrap repository
      - name: Get SHA of chemical-bootstrap repository
        id: get-sha
        working-directory: chemical-bootstrap
        run: |
          SHA=$(git rev-parse HEAD | xargs)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # Restore cache
      - name: Restore cache for chemical-bootstrap
        id: bootstrap-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Build the chemical-bootstrap project (macOS) (only if not cached)
      - name: Build chemical-bootstrap
        working-directory: chemical-bootstrap
        run: |
          chmod +x build
          ./build native-macos-none native
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true'

      # Save cache
      - name: Save cache for chemical-bootstrap
        if: steps.bootstrap-cache-restore.outputs.cache-hit != 'true' && success()
        id: bootstrap-cache-save
        uses: actions/cache/save@v4
        with:
          path: chemical-bootstrap/out/
          key: ${{ runner.os }}-${{ steps.get-sha.outputs.sha }}-${{ matrix.arch }}

      # Configure chemical project
      - name: Configure Chemical Project
        working-directory: chemical-bootstrap/chemical
        run: |
          mkdir -p out/build
          cmake -S . -B out/build -DCMAKE_BUILD_TYPE=Release

      # Run configure script
      - name: Run configure script
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/setup-tcc.sh
          chmod +x ./scripts/configure.sh
          ./scripts/configure.sh

      # Build Compiler Targets
      - name: Build Compiler Targets
        working-directory: chemical-bootstrap/chemical
        run: |
          cmake --build out/build --config Release --target Compiler
          cmake --build out/build --config Release --target TCCCompiler
          cmake --build out/build --config Release --target ChemicalLsp

      # Run release packaging
      - name: Run release packaging
        working-directory: chemical-bootstrap/chemical
        run: |
          chmod +x ./scripts/release.sh
          ./scripts/release.sh --macos

      # Rename macOS release files to include the arch
      - name: Rename macOS release files
        shell: bash
        run: |
          mv chemical-bootstrap/chemical/out/release/macos.zip chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}.zip
          mv chemical-bootstrap/chemical/out/release/macos-tcc.zip chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-tcc.zip
          mv chemical-bootstrap/chemical/out/release/macos-lsp.zip chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-lsp.zip

      # Get latest release info
      - name: Get latest release info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const releasesResponse = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const validReleases = releasesResponse.data.filter(release => !release.draft);
            if (validReleases.length === 0) {
              throw new Error("No published or pre-releases found.");
            }
            const latestRelease = validReleases[0];
            core.setOutput("tag", latestRelease.tag_name);
            core.setOutput("id", latestRelease.id);

      # Check and (conditionally) upload macOS archives
      - name: Check if macos-${{ matrix.arch }}.zip exists in latest release
        id: check_macos
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.get_latest_release.outputs.tag }}';
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            const filenames = [
              `macos-${{ matrix.arch }}.zip`,
              `macos-${{ matrix.arch }}-tcc.zip`,
              `macos-${{ matrix.arch }}-lsp.zip`
            ];
            const exists = release.assets.some(asset => filenames.includes(asset.name));
            core.setOutput("exists", exists.toString());

      # Upload artifacts
      - name: Upload release artifacts
        if: steps.check_macos.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_release.outputs.tag }}
          files: |
            chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}.zip
            chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-tcc.zip
            chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-lsp.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Save as artifact if already exists
      - name: Save macos-${{ matrix.arch }}.zip as artifact if already exists
        if: steps.check_macos.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}.zip
          path: chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}.zip

      - name: Save macos-${{ matrix.arch }}-tcc.zip as artifact if already exists
        if: steps.check_macos.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-tcc.zip
          path: chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-tcc.zip

      - name: Save macos-${{ matrix.arch }}-lsp.zip as artifact if already exists
        if: steps.check_macos.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-lsp.zip
          path: chemical-bootstrap/chemical/out/release/macos-${{ matrix.arch }}-lsp.zip