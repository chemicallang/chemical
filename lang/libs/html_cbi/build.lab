import lab
import std

import "@cstd/build.lab" as cstdMod
import "@std/build.lab" as stdMod
import "@compiler/build.lab" as compilerMod
import "@html_parser/build.lab" as htmlParser
import "@html_ide/build.lab" as htmlIdeMod

using namespace std;

var did_once = false;

public func build(ctx : *mut BuildContext, user_job : *mut LabJob) : *mut Module {

    const __chx_already_exists = ctx.get_cached(user_job, "", "std");
    if(__chx_already_exists != null) { return __chx_already_exists; };

    // the std module
    var user_std_module = stdMod.build(ctx, user_job);
    if(user_std_module == null) {
        return null
    }

    if(did_once) return user_std_module;
    did_once = true;

    var cbi = ctx.build_cbi(std::string_view("html"))
    const job = cbi;

    var std_module = stdMod.build(ctx, job);
    if(std_module == null) {
        return null
    }

    // the cstd module
    var cstd_module = cstdMod.build(ctx, job);
    if(cstd_module == null) {
        return null
    }

    // the std module
    var compiler_module = compilerMod.build(ctx, job);
    if(compiler_module == null) {
        return null
    }

    // html parser module
    var html_parser = htmlParser.build(ctx, job)
    if(html_parser == null) {
        return null
    }

    // only compile html ide module in lsp
    var htmlIde : *mut Module
    if(def.lsp) {
        htmlIde = htmlIdeMod.build(ctx, job)
        if(htmlIde == null) {
            return null;
        }
    } else {
        htmlIde = html_parser
    }

    var dependencies = [ cstd_module, std_module, compiler_module, html_parser, htmlIde ]
    const module = ctx.chemical_dir_module(std::string_view(""), std::string_view("html_cbi"), lab::rel_path_to("src").to_view(), dependencies);

    ctx.add_module(cbi, module)

    ctx.index_def_cbi_fn(cbi, std::string_view("html_initializeLexer"), CBIFunctionType.InitializeLexer);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_parseMacroValue"), CBIFunctionType.ParseMacroValue);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_parseMacroNode"), CBIFunctionType.ParseMacroNode);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_symResNode"), CBIFunctionType.SymResNode);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_symResValue"), CBIFunctionType.SymResValue);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_replacementNode"), CBIFunctionType.ReplacementNode);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_replacementValue"), CBIFunctionType.ReplacementValue);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_traversalNode"), CBIFunctionType.TraversalNode);
    ctx.index_def_cbi_fn(cbi, std::string_view("html_traversalValue"), CBIFunctionType.TraversalValue);

    if(def.lsp) {
        // this will let the lsp know that methods are present
        ctx.index_def_cbi_fn(cbi, std::string_view("html_semanticTokensPut"), CBIFunctionType.SemanticTokensPut);
        ctx.index_def_cbi_fn(cbi, std::string_view("html_foldingRangesPut"), CBIFunctionType.FoldingRangesPut);
    }

    return user_std_module;

}