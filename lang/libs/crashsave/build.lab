import lab;
import std;
import "@cstd/build.lab" as __mod_cstd
import "@std/build.lab" as __mod_std

public func build(ctx : *mut BuildContext, job : *LabJob) : *mut Module {
	const already = ctx.get_cached(job, "", "crashsave");
	if(already != null) { return already; }
	if(job.target.tcc) {
        const mod = ctx.new_module("", "crashsave", [ __mod_cstd.build(ctx, job), __mod_std.build(ctx, job), ]);
        ctx.set_cached(job, mod)
        ctx.add_path(mod, lab::rel_path_to("src/common.ch").to_view());
        if(job.target.windows) {
            ctx.add_path(mod, lab::rel_path_to("tcc/windows.ch").to_view());
        } else {
            ctx.add_path(mod, lab::rel_path_to("tcc/posix.ch").to_view());
        }
        return mod;
	} else {

	    // c file module
	    const bt_mod = ctx.c_file_module("", "crashsave.bt", lab::rel_path_to("libbacktrace/backtrace.c"), [])
        const bt_base_mod = ctx.c_file_module("", "crashsave.bt.base", lab::rel_path_to("libbacktrace/base.c"), [])

        var deps = std::vector<*Module>()

        deps.push(__mod_cstd.build(ctx, job))
        deps.push(__mod_std.build(ctx, job))

        deps.push(bt_mod)
        deps.push(bt_base_mod)

        if(job.target.windows) {
            const bt_windows_mod = ctx.c_file_module("", "crashsave.bt.windows", lab::rel_path_to("libbacktrace/windows.c"), [])
            deps.push(bt_windows_mod)
        } else if(job.target.linux) {
            const bt_linux_mod = ctx.c_file_module("", "crashsave.bt.linux", lab::rel_path_to("libbacktrace/linux.c"), [])
            deps.push(bt_linux_mod)
        } else if(job.target.macos) {
            const bt_darwin_mod = ctx.c_file_module("", "crashsave.bt.darwin", lab::rel_path_to("libbacktrace/darwin.c"), [])
            deps.push(bt_darwin_mod)
        } else {
            // TODO: error out i guess
        }

        const mod = ctx.new_module("", "crashsave", std::span<*Module>(deps));
        ctx.set_cached(job, mod)

        ctx.add_path(mod, lab::rel_path_to("src/common.ch").to_view());
        ctx.add_path(mod, lab::rel_path_to("src/libbacktrace.ch").to_view());
        ctx.add_path(mod, lab::rel_path_to("src/stacktrace.ch").to_view());

        return mod;

	}

}

