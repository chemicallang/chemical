import lab
import std

import "@cstd/build.lab" as cstdMod
import "@std/build.lab" as stdMod
import "@compiler/build.lab" as compilerMod
import "@html_parser/build.lab" as htmlParser
import "@html_ide/build.lab" as htmlIdeMod

using namespace std;

func build(ctx : *mut BuildContext) : *Module {

    // the cstd module
    var cstd_module = cstdMod.get(ctx);
    if(cstd_module == null) {
        return null
    }

    // the std module
    var std_module = stdMod.get(ctx);
    if(std_module == null) {
        return null
    }

    // the std module
    var compiler_module = compilerMod.get(ctx);
    if(compiler_module == null) {
        return null
    }

    // html parser module
    var html_parser = htmlParser.get(ctx)
    if(html_parser == null) {
        return null
    }

    // only compile html ide module in lsp
    var htmlIde : *Module
    if(def.lsp) {
        htmlIde = htmlIdeMod.get(ctx)
        if(htmlIde == null) {
            return null;
        }
    } else {
        htmlIde = html_parser
    }

    var dependencies = [ cstd_module, std_module, compiler_module, html_parser, htmlIde ]
    const module = ctx.chemical_dir_module(std::string_view(""), std::string_view("html_cbi"), lab::rel_path_to("src").to_view(), dependencies);

    var cbiDeps = [ module ]
    var cbi = ctx.build_cbi(std::string_view("html"), cbiDeps)
    ctx.add_cbi_type(cbi, CBIType.MacroLexer)
    ctx.add_cbi_type(cbi, CBIType.MacroParser)

    if(def.lsp) {
        // this will let the compiler know that methods are present
        ctx.add_cbi_type(cbi, CBIType.IDESupport)
    }

    return std_module;

}