// Copyright (c) Qinetik 2024.

#pragma once

#include "ast/base/LoopASTNode.h"
#include "ast/base/Value.h"
#include "LoopScope.h"

/**
 * loop block represents the Loop Block
 *
 * loop { } <-- which repeats infinitely until stopped by
 * a break statement, the code generated by a loop block is very concise
 *
 */
class LoopBlock : public LoopASTNode, public Value {
public:

    ASTNode* parent_node;
    Value* first_broken = nullptr;

    /**
     * constructor
     */
    LoopBlock(LoopScope scope, ASTNode* parent_node) : LoopASTNode(std::move(scope)), parent_node(parent_node) {

    }

    void accept(Visitor *visitor) override {
        visitor->visit(this);
    }

    ASTNode* parent() override {
        return parent_node;
    }

    ASTNodeKind kind() override {
        return ASTNodeKind::LoopBlock;
    }

    ValueKind val_kind() override {
        return ValueKind::LoopValue;
    }

    void declare_and_link(SymbolResolver &linker, std::unique_ptr<ASTNode> &node_ptr) override;

    void link(SymbolResolver &linker, std::unique_ptr<Value> &value_ptr) override;

    Value* get_first_broken();

    std::unique_ptr<BaseType> create_value_type() override;

    std::unique_ptr<BaseType> create_type() override;

    hybrid_ptr<BaseType> get_base_type() override;

    hybrid_ptr<BaseType> get_value_type() override;

    BaseType* known_type() override;

#ifdef COMPILER_BUILD

    llvm::Type* llvm_type(Codegen &gen) override;

    llvm::Value* llvm_value(Codegen &gen, BaseType *type = nullptr) override;

    llvm::Value* llvm_assign_value(Codegen &gen, Value *lhs) override;

    llvm::AllocaInst* llvm_allocate(Codegen &gen, const std::string &identifier, BaseType *expected_type) override;

    void code_gen(Codegen &gen) override;

#endif

};