// Copyright (c) Chemical Language Foundation 2025.

#pragma once

#include "ast/base/LoopASTNode.h"
#include "ast/base/Value.h"
#include "Scope.h"

/**
 * loop block represents the Loop Block
 *
 * loop { } <-- which repeats infinitely until stopped by
 * a break statement, the code generated by a loop block is very concise
 *
 */
class LoopBlock : public LoopASTNode {
public:

    Value* first_broken = nullptr;

    /**
     * constructor
     */
    constexpr LoopBlock(
            ASTNode* parent_node,
            SourceLocation location
    ) : LoopASTNode(ASTNodeKind::LoopBlock, parent_node, location)
    {

    }

    void copy_into(ASTAllocator& allocator, LoopBlock* blk) {
        body.copy_into(blk->body, allocator, blk);
        // TODO: should we recalculate in generic instantiation ?
        blk->first_broken = first_broken;
    }

    ASTNode* copy(ASTAllocator &allocator) override {
        const auto blk = new (allocator.allocate<LoopBlock>()) LoopBlock(parent(), encoded_location());
        copy_into(allocator, blk);
        return blk;
    }

    Value* get_first_broken();

    BaseType* known_type() final;

#ifdef COMPILER_BUILD

    void code_gen(Codegen &gen) final;

#endif

};