import "../std/lab.ch"

func curr_dir() : string {
    const curr_path_str = string(#file:path{});
    return curr_path_str.substring(0, curr_path_str.size() - 9)
}

func relative_path(path : string) : string {
    var dir = curr_dir();
    dir.append_str(path);
    return dir;
}

func exe_dir_path(ctx : BuildContext*, exe_name : string*) : string {
    const new_path = ctx.build_path();
    new_path.append('/');
    new_path.append_str(exe_name);
    new_path.append_char_ptr(".dir");
    new_path.append('/')
    return new_path;
}

func exe_dir_file(ctx : BuildContext*, exe_name : string*, file_name : string*, extension : char*) : string {
    const exe_dir = exe_dir_path(ctx, exe_name);
    exe_dir.append_str(file_name);
    exe_dir.append_char_ptr(extension);
    return exe_dir;
}

func gen_ir(ctx : BuildContext*, exe_name : string*, module : Module*) {
    module.llvm_ir_path = exe_dir_path(ctx, exe_name)
    module.llvm_ir_path.append_str(&module.name);
    module.llvm_ir_path.append_char_ptr(".ll")
    printf("module : %s, llvm ir : %s\n", module.name.data(), module.llvm_ir_path.data());
}

struct JobAndContext {
    var ctx : BuildContext*
    var job : LabJob*
}

var jc : JobAndContext

func build(ctx : BuildContext*) {

    const debug = true;
    if(debug) {
        const curr_path_str = string(#file:path{});
        printf("[build.lab] current file path : %s\n", curr_path_str.data());
        const curr_dir_path = curr_dir();
        printf("[build.lab] current dir path : %s\n", curr_dir_path.data());
        const interested_path = relative_path(string("ext/file.c"));
        printf("[build.lab] interested relative path : %s\n", interested_path.data());
    }

    const compiler_version = compiler::version();
    printf("Compiler Version = %s\n", compiler_version);
    const str_arg = string("hello");
    if(ctx.has_arg(str_arg)) {
        const said = ctx.get_arg(str_arg);
        printf("WOW : Hello World I guess, you said %s \n", said.data());
    }

    const is_minimal = ctx.has_arg(string("minimal"))
    if(is_minimal) {
        printf("Minimal Build Detected\n");
    }
    const exe_name = string("chemical-tests");
    const ext_module = ctx.c_file_module(string("ext_c"), relative_path(string("ext/file.c")), { })
    const module = ctx.chemical_file_module(exe_name, relative_path(string("tests.ch")), { ext_module });

    const do_llvm_ir = false;
    const do_asm = false;
    const do_c = !is_minimal || !compiler::is_clang_based();
    const do_to_ch = !is_minimal && compiler::is_clang_based();
    const do_dyn_lib = !is_minimal;

    if(do_llvm_ir) {
        gen_ir(ctx, &exe_name, module);
    }

    if(do_asm) {
        module.asm_path = exe_dir_path(ctx, &exe_name)
        module.asm_path.append_str(&module.name);
        module.asm_path.append_char_ptr(".s")
        printf("The asm path is %s\n", module.asm_path.data());
    }

    if(do_dyn_lib) {
        ctx.build_dynamic_lib(exe_name, { module });
    }

    const exe_job = ctx.build_exe(exe_name, { module });

    if(do_c) {
        const output_file = exe_dir_file(ctx, &exe_name, &module.name, ".c")
        // const input_file = relative_path(string("tests.ch"))
        ctx.translate_mod_to_c(module, output_file);
    }

    if(do_to_ch) {
        const output_file = exe_dir_file(ctx, &exe_name, &ext_module.name, ".ch")
        const input_file = relative_path(string("ext/file.c"))
        ctx.translate_to_chemical(input_file, output_file);
    }

    jc.ctx = ctx;
    jc.job = exe_job;

    ctx.on_finished((data : void*) => {
        const jx = data as JobAndContext*
        if(jx.job.status == LabJobStatus.Success) {
            jx.ctx.launch_executable(jx.job.abs_path.copy(), true);
        }
    }, &jc);

}